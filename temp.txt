
class stack_linked_list
{
    private:
    struct node
    {
        int item;
        node *next;
    };
    node *top,*current;
    public:
    stack_linked_list()
    {
        top=NULL;
    }
    void push(int element)
    {
        node *newitemptr=new node;
        if(newitemptr==NULL)
        {
            cout<<"Can't allocate memory";
        }
        else
        {
            newitemptr->item=element;
            newitemptr->next=top;
            top=newitemptr;
        }
    }
    bool IsEmpty()
    {
        if (top==NULL)
            return true;
        return false;
    }
    void pop()
    {
        if(IsEmpty())
        {
            cout<<"stack empty";
        }
        else
        {
            node *temp=new node;
            temp=top;
            top=top->next;
            temp=temp->next=NULL;
            delete temp;
        }
    }
     int get_top()
    {
        if(IsEmpty())
        {
            cout<<"stack empty";
            return 0;
        }
       return top->item;
    }
    void print()
    {
        current=top;
        while (current!=NULL)
        {
            cout<<current->item;
            if(current->next!=NULL)
            {
                cout<<"->";
            }
             current=current->next;


        }
    }

};
class stack_Arry
{
private:
    int top;
    int item[MX];
public:
    stack_Arry()
    {
        top=-1;
    }
   void push(int element)
    {
        if(top>=MX-1)
        {
            cout<<"Full stack";
        }
        else
        {
        top++;
        item[top]=element;
        }
    }
    bool IsEmpty()
    {
        if(top==-1)
        {
            return true;
        }
        else
        {
            return false;
        }
    }
    void pop()
    {
        if (IsEmpty())
        {
            cout<<"stack is empty";
        }
        else
        {
        top--;
        }
    }
    void print()
    {
        cout<<"[ ";
        for(int i=top;i>=0;i--)
        {
            cout<<item[i]<<" ";
        }
        cout<<"]"<<endl;
    }
    int gettop()
    {
        if(IsEmpty())
        {
            cout<<"stack is empty";
            return 0;
        }
            return item[top];
    }

    void pop(int &element)
    {
        if (IsEmpty())
        {
            cout<<"stack is empty";
        }
        else
        {
            element=item[top];
            top--;
        }
    }

};
class circular_queue_array
{
private:
    int rear,Front,Length,mxsz;
    int *arraysize;
public:
    circular_queue_array(int Size)
    {
        if (Size<=0)
        {
            mxsz=100;
        }
        else
        {
            mxsz=Size;
        }
        arraysize=new int [mxsz];
        Front=0;
        Length=0;
        rear=mxsz-1;
    }
    bool IsEmpty()
    {
        if(Length==0)
        {
            return true;
        }
        return false;
    }
    bool IsFull()
    {
        if(Length==mxsz)
        {
            return true;
        }
        return false;
    }
    void enqueue(int element)
    {
        if(IsFull())
        {
            cout<<"Queue is full"<<endl;
        }
        else
        {
            rear=(rear+1)%mxsz;
            arraysize[rear]=element;
            Length++;
        }
    }
    void dequeue()
    {
        if(IsEmpty())
        {
            cout<<"Queue is empty"<<endl;
        }
        else
        {
            Front=(Front+1)%mxsz;
            Length--;
        }
    }
    int get_front()
    {
        if(IsEmpty())
        {
            return NULL;
        }
        return arraysize[Front];
    }
    int get_rear()
    {
        if(IsEmpty())
        {
            return NULL;
        }
        return arraysize[rear];
    }
    void print()
    {
        if(!IsEmpty())
        {
        for(int i=Front;i!=rear+1;i=(i+1)%mxsz)
        {
            cout<<arraysize[i];
            if(i!=rear)
            {
                cout<<"->";
            }
        }
        }
        else
        {
            cout<<"Queue empty";
        }
        cout<<endl;
    }

};
class queue_linked_list
{
private:
    struct node
    {
        int item;
        node *next;
    };
    node *Front,*rear;
    int Length;
public:
    queue_linked_list()
    {
        Front=rear=NULL;
        Length=0;
    }
    bool IsEmpty()
    {
        if(Front==NULL&&rear==NULL&&Length==0)
        {
            return true;
        }
        return false;
    }
    void enqueue(int element)
    {
        if(IsEmpty())
        {
            Front=new node;
            Front->item=element;
            Front->next=NULL;
            rear=Front;
            Length++;
        }
        else
        {
            node *nextelement=new node;
            nextelement->item=element;
            nextelement->next=NULL;
            rear->next=nextelement;
            rear=nextelement;
            Length++;
        }

    }
    void dequeue()
    {
        node *temp=new node;
        if(IsEmpty())
            {
                cout<<"Queue is empty"<<endl;
            }
        else if(Length==1)
         {
            Front=NULL;
            rear=NULL;
            Length--;
         }
        else
            {
             temp=Front;
             Front=Front->next;
             temp->next=NULL;
             Length--;
             delete temp;
            }
        }
    int get_front()
    {
        if(IsEmpty())
        {
            cout<<"queue empty"<<endl;
            return 0;
        }
        return Front->item;
    }
    int get_rear()
    {
        if(IsEmpty())
        {
            cout<<"queue empty"<<endl;
            return 0;
        }
        return rear->item;
    }
    void clearr()
    {
        node *cur;
        while(Front!=NULL)
        {
            cur=Front;
            Front=Front->next;
            delete cur;
        }
        rear =NULL;
        Length=0;
    }
    void print()
    {
        node *cur=Front;
        while(cur!=NULL)
        {
            cout<<cur->item;
            if(cur->next!=NULL)
            {
                cout<<"->";
            }
            cur=cur->next;
        }
    }
    int getsize()
    {
        return Length;
    }
};